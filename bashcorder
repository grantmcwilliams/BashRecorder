#!/bin/bash

cleanup()
{
	if pgrep ffmpeg &> /dev/null ;then
		killall ffmpeg
	fi

	if [[ "$RAMREC" = 'true' ]] ;then
		if [[ -d "/dev/shm/${APPNAME}" ]] ;then
			rm -Rf "/dev/shm/${APPNAME}"
		fi
	else
		rm -f "$VTMPFILE"	
	fi
	exit
}
trap 'cleanup' SIGINT SIGTERM

# Locations
APPNAME=${0##*/}
CONFDIR="${HOME}/.bashcorder"		
CONFFILE="${CONFDIR}/settings.conf"	
LOGFILE="${CONFDIR}/${APPNAME}.log"
DEPLIST="vlc ffmpeg zenity xrandr"  
VDIR="${HOME}/Videos"		  

# Do not edit - to override edit ${CONFDIR}/settings.conf"
QUEUE='1024'                    	        
ACHANNELS='2'                   	
ARATE='48000'                   	
ACODEC='pcm_s16le'             	 	 
ADEV='sysdefault:CARD=USBPre2'  	
ATYPE='alsa'                    
VFPS='15'                       	
VRES='auto'             			
VSCREEN=':0.0'                 
VCODEC='libx264'                	
VFCODEC='libx264'					
VTYPE='x11grab'                
VPRESET='ultrafast'             	 
VFPRESET='veryslow'             	 
VTUNE='stillimage'
VQUAL='0'                       	
VFQUAL='0'                 
VKEYFRAMES='90'           

log()
{
	local MSG="$1"
	echo "$(date '+%b %d %H:%M:%S') ${HOSTNAME} ${APPNAME}: $MSG" >> "$LOGFILE"

}

setup()
{
	for PROG in $DEPLIST ;do
		if ! which "$PROG" &> /dev/null ;then
			zenity --error --title="${APPNAME^}" --text="$PROG not installed - exiting" 2>/dev/null
			exit 1
		fi
	done

	for DIR in "$VDIR" "$CONFDIR" ; do
		if [[ ! -d "$DIR" ]] ;then
			mkdir -p "$DIR"
		fi
	done

	# Source the settings.conf file
	if [[ -e "$CONFFILE" ]] ;then
		source "$CONFFILE"
	fi

	if [[ "$VRES" = 'auto' ]] ;then   
		VRES=$(xrandr | awk '/\*/{print $1}')
	fi
	
	VTMPFILE="${VDIR}/${APPNAME}.${VIDTYPE}"
	if [[ "$RAMREC" = 'true' ]] ;then
		if mount | grep -q '/dev/shm' ;then 
			if [[ ! -d "/dev/shm/${APPNAME}" ]] ;then
				mkdir -p "/dev/shm/${APPNAME}"
			fi
			VDIR="/dev/shm/${APPNAME}"
			VTMPFILE="${VDIR}/${APPNAME}.${VIDTYPE}"
		else
			log "/dev/shm not active - using $VDIR"
		fi
	fi
}

savefile()
{
	SAVENAME=$(zenity --file-selection --filename="$PREVDIR" --save	--title="Save as" 2>/dev/null)
	case $? in
        -1) echo "An unexpected error has occurred."; return 1;;
	esac

	if [[ ! -z "$SAVENAME" ]] ;then
		if grep -q 'PREVDIR' "$CONFFILE" ;then
			sed -i "s%PREVDIR.*%PREVDIR=\"${SAVENAME%/*}/\"%g" "$CONFFILE" 
		else
			echo "PREVDIR=\"${SAVENAME%/*}/\"" >> "$CONFFILE"
		fi
	else
		if deletevideo "$VTMPFILE" ; then
			return
		fi
	fi
	playvideo "$VTMPFILE"
	if ! movevideo "$VTM PFILE" "$SAVENAME" ;then
		return 1
	fi
}

stoprecord()
{
	if [[ ! -z "$FFPID" ]] ;then
		kill -INT "$FFPID"
	fi
	RECORDING='false'
	savefile 
}

trap 'stoprecord' USR1

# Name the video according to it's type
movevideo(){
	local SRC="$1"
	local DEST="$2"
	if [[ -f "$DEST" ]];then
		zenity --question --title="" --text "File exists - overwrite?" --ok-label="Yes" 
		--cancel-label="No" 2> /dev/null
		if [[ "$?" -eq '1' ]] ;then
			zenity --question --title="" --text "Is this a pickup or retake" --ok-label="Pickup" \ 
			--cancel-label="Retake" 2> /dev/null
			case $? in
    			0) OP='pickup';;
    			1) OP='retake' ;;
    			-1) echo "An unexpected error has occurred." ; return 1;;
			esac
			EXT="${DEST##*.}"
			REST="${DEST%.*}"
			if [[ "$OP" = 'retake' ]] ;then
				if [[ "$REST" =~ .*[tT][kK].* ]] ;then
					TAKE=${REST##*_}
					REST=${REST%_*} 
					TAKENUM=${TAKE//[[:alpha:]]}
					(( TAKENUM++ ))
					DEST="${REST}_tk${TAKENUM}.${EXT}"
				else
					DEST="${REST}_tk1.${EXT}"
				fi
			fi  
			if [[ "$OP" = 'pickup' ]] ;then
            	if [[ "${REST}" =~ .*[pP][uU].* ]] ;then
                	PU="${REST##*_}"
                	REST="${REST%_*}"
                	PUNUM="${PU//[[:alpha:]]}"
                	(( PUNUM++ ))
                	DEST="${REST}_PU${PUNUM}.${EXT}"
            	else
                	DEST="${REST}_PU1.${EXT}"
            	fi
        	fi  
		fi
	fi
	if ! OUT=$(mv -f "$SRC" "$DEST") ;then
    	zenity --error --title="${APPNAME^}" --text="Unable to move $SRC to $DEST - exiting" 2>/dev/null
		log "Warning: Unable to move $SRC to $DEST"
		log "$OUT"
		return 1
	else
		log "Moved $SRC to $DEST"
	fi
}

playvideo(){
	local VIDFILE="$1"
	if zenity --title="${APPNAME^}" --question --text="Do you want to view the video? (Y/N)" 2>/dev/null ;then
    	log "Viewing $VIDFILE"
	   	vlc -q --play-and-exit "$VIDFILE" vlc://quit 2> /dev/null 
	fi
}

startrecord()
{
	if [[ -f "$VTMPFILE" ]] ;then
		rm -f "$VTMPFILE"
	fi

	(
		echo "#Recording in 4" ;echo "25" ; sleep 1
        echo "#Recording in 3" ;echo "50" ; sleep 1
        echo "#Recording in 2" ;echo "75" ; sleep 1
        echo "#Recording in 1" ;echo "100" ; sleep 1
	) | zenity --progress --auto-close --title="${APPNAME^}" --text="Recording" --percentage=0 2>/dev/null
	
	if [[ "$?" -eq '1' ]] ; then
	   	zenity --error --title="${APPNAME^}" --text="Recording Canceled" 2>/dev/null
       	return 1
	else
		RECORDING='true'
		log "Starting new recording"
		ffmpeg -y -thread_queue_size "$QUEUE" -f "$VTYPE" -s "$VRES" -r "$VFPS" -i "$VSCREEN" \
	    -thread_queue_size "$QUEUE" -f "$ATYPE" -i "$ADEV" -ar "$ARATE" -ac "$ACHANNELS" \
	    -acodec "$ACODEC"  -x264opts "keyint=${VKEYFRAMES}:min-keyint=${VKEYFRAMES}:scenecut=-1" \
	    -c:v "$VCODEC" -crf "$VQUAL" -tune "$VTUNE" -r "$VFPS" -preset:v "$VPRESET" "$VTMPFILE" &>/dev/null &	
	    FFPID="$!"
	    while [ "$RECORDING" = 'true' ] ; do
			sleep 1
	    done
	fi
}

setup

if ! startrecord ; then
	log "Warning: Unable to start recording"
	exit 1
fi
